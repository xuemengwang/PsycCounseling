<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.meng.mapper.UserMapper" >
  <resultMap id="BaseResultMap" type="com.meng.model.User" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="CHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="TINYINT" />
    <result column="idcard" property="idcard" jdbcType="VARCHAR" />
    <result column="borndate" property="borndate" jdbcType="DATE" />
    <result column="address" property="address" jdbcType="VARCHAR" />
    <result column="degree" property="degree" jdbcType="CHAR" />
    <result column="qualification" property="qualification" jdbcType="VARCHAR" />
    <result column="qualificationid" property="qualificationid" jdbcType="VARCHAR" />
    <result column="field" property="field" jdbcType="TINYINT" />
    <result column="college" property="college" jdbcType="VARCHAR" />
    <result column="role" property="role" jdbcType="TINYINT" />
    <result column="avatar" property="avatar" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.meng.model.User" extends="BaseResultMap" >
    <result column="introduction" property="introduction" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, name, phone, password, sex, idcard, borndate, address, degree, qualification, 
    qualificationid, field, college, role, avatar
  </sql>
  <sql id="Blob_Column_List" >
    introduction
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.meng.model.UserExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.meng.model.UserExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.meng.model.UserExample" >
    delete from user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.meng.model.User" >
    insert into user (id, name, phone, 
      password, sex, idcard, 
      borndate, address, degree, 
      qualification, qualificationid, field,
      college, role, avatar, 
      introduction)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=CHAR}, #{phone,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{sex,jdbcType=TINYINT}, #{idcard,jdbcType=VARCHAR}, 
      #{borndate,jdbcType=DATE}, #{address,jdbcType=VARCHAR}, #{degree,jdbcType=CHAR}, 
      #{qualification,jdbcType=VARCHAR}, #{qualificationid,jdbcType=VARCHAR}, #{field,jdbcType=TINYINT},
      #{college,jdbcType=VARCHAR}, #{role,jdbcType=TINYINT}, #{avatar,jdbcType=VARCHAR}, 
      #{introduction,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.meng.model.User" >
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="phone != null" >
        phone,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="sex != null" >
        sex,
      </if>
      <if test="idcard != null" >
        idcard,
      </if>
      <if test="borndate != null" >
        borndate,
      </if>
      <if test="address != null" >
        address,
      </if>
      <if test="degree != null" >
        degree,
      </if>
      <if test="qualification != null" >
        qualification,
      </if>
      <if test="qualificationid != null" >
        qualificationid,
      </if>
      <if test="field != null" >
        field,
      </if>
      <if test="college != null" >
        college,
      </if>
      <if test="role != null" >
        role,
      </if>
      <if test="avatar != null" >
        avatar,
      </if>
      <if test="introduction != null" >
        introduction,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=CHAR},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=TINYINT},
      </if>
      <if test="idcard != null" >
        #{idcard,jdbcType=VARCHAR},
      </if>
      <if test="borndate != null" >
        #{borndate,jdbcType=DATE},
      </if>
      <if test="address != null" >
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="degree != null" >
        #{degree,jdbcType=CHAR},
      </if>
      <if test="qualification != null" >
        #{qualification,jdbcType=VARCHAR},
      </if>
      <if test="qualificationid != null" >
        #{qualificationid,jdbcType=VARCHAR},
      </if>
      <if test="field != null" >
        #{field,jdbcType=TINYINT},
      </if>
      <if test="college != null" >
        #{college,jdbcType=VARCHAR},
      </if>
      <if test="role != null" >
        #{role,jdbcType=TINYINT},
      </if>
      <if test="avatar != null" >
        #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="introduction != null" >
        #{introduction,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.meng.model.UserExample" resultType="java.lang.Integer" >
    select count(*) from user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update user
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=CHAR},
      </if>
      <if test="record.phone != null" >
        phone = #{record.phone,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null" >
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null" >
        sex = #{record.sex,jdbcType=TINYINT},
      </if>
      <if test="record.idcard != null" >
        idcard = #{record.idcard,jdbcType=VARCHAR},
      </if>
      <if test="record.borndate != null" >
        borndate = #{record.borndate,jdbcType=DATE},
      </if>
      <if test="record.address != null" >
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.degree != null" >
        degree = #{record.degree,jdbcType=CHAR},
      </if>
      <if test="record.qualification != null" >
        qualification = #{record.qualification,jdbcType=VARCHAR},
      </if>
      <if test="record.qualificationid != null" >
        qualificationid = #{record.qualificationid,jdbcType=VARCHAR},
      </if>
      <if test="record.field != null" >
        field = #{record.field,jdbcType=TINYINT},
      </if>
      <if test="record.college != null" >
        college = #{record.college,jdbcType=VARCHAR},
      </if>
      <if test="record.role != null" >
        role = #{record.role,jdbcType=TINYINT},
      </if>
      <if test="record.avatar != null" >
        avatar = #{record.avatar,jdbcType=VARCHAR},
      </if>
      <if test="record.introduction != null" >
        introduction = #{record.introduction,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update user
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=CHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=TINYINT},
      idcard = #{record.idcard,jdbcType=VARCHAR},
      borndate = #{record.borndate,jdbcType=DATE},
      address = #{record.address,jdbcType=VARCHAR},
      degree = #{record.degree,jdbcType=CHAR},
      qualification = #{record.qualification,jdbcType=VARCHAR},
      qualificationid = #{record.qualificationid,jdbcType=VARCHAR},
      field = #{record.field,jdbcType=TINYINT},
      college = #{record.college,jdbcType=VARCHAR},
      role = #{record.role,jdbcType=TINYINT},
      avatar = #{record.avatar,jdbcType=VARCHAR},
      introduction = #{record.introduction,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update user
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=CHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=TINYINT},
      idcard = #{record.idcard,jdbcType=VARCHAR},
      borndate = #{record.borndate,jdbcType=DATE},
      address = #{record.address,jdbcType=VARCHAR},
      degree = #{record.degree,jdbcType=CHAR},
      qualification = #{record.qualification,jdbcType=VARCHAR},
      qualificationid = #{record.qualificationid,jdbcType=VARCHAR},
      field = #{record.field,jdbcType=TINYINT},
      college = #{record.college,jdbcType=VARCHAR},
      role = #{record.role,jdbcType=TINYINT},
      avatar = #{record.avatar,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.meng.model.User" >
    update user
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=CHAR},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=TINYINT},
      </if>
      <if test="idcard != null" >
        idcard = #{idcard,jdbcType=VARCHAR},
      </if>
      <if test="borndate != null" >
        borndate = #{borndate,jdbcType=DATE},
      </if>
      <if test="address != null" >
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="degree != null" >
        degree = #{degree,jdbcType=CHAR},
      </if>
      <if test="qualification != null" >
        qualification = #{qualification,jdbcType=VARCHAR},
      </if>
      <if test="qualificationid != null" >
        qualificationid = #{qualificationid,jdbcType=VARCHAR},
      </if>
      <if test="field != null" >
        field = #{field,jdbcType=TINYINT},
      </if>
      <if test="college != null" >
        college = #{college,jdbcType=VARCHAR},
      </if>
      <if test="role != null" >
        role = #{role,jdbcType=TINYINT},
      </if>
      <if test="avatar != null" >
        avatar = #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="introduction != null" >
        introduction = #{introduction,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.meng.model.User" >
    update user
    set name = #{name,jdbcType=CHAR},
      phone = #{phone,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=TINYINT},
      idcard = #{idcard,jdbcType=VARCHAR},
      borndate = #{borndate,jdbcType=DATE},
      address = #{address,jdbcType=VARCHAR},
      degree = #{degree,jdbcType=CHAR},
      qualification = #{qualification,jdbcType=VARCHAR},
      qualificationid = #{qualificationid,jdbcType=VARCHAR},
      field = #{field,jdbcType=TINYINT},
      college = #{college,jdbcType=VARCHAR},
      role = #{role,jdbcType=TINYINT},
      avatar = #{avatar,jdbcType=VARCHAR},
      introduction = #{introduction,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.meng.model.User" >
    update user
    set name = #{name,jdbcType=CHAR},
      phone = #{phone,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=TINYINT},
      idcard = #{idcard,jdbcType=VARCHAR},
      borndate = #{borndate,jdbcType=DATE},
      address = #{address,jdbcType=VARCHAR},
      degree = #{degree,jdbcType=CHAR},
      qualification = #{qualification,jdbcType=VARCHAR},
      qualificationid = #{qualificationid,jdbcType=VARCHAR},
      field = #{field,jdbcType=TINYINT},
      college = #{college,jdbcType=VARCHAR},
      role = #{role,jdbcType=TINYINT},
      avatar = #{avatar,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>



  <!--以下非逆向工程自动生成-->
  <select id="selectExpertsWithLimit" resultType="com.meng.model.User">
    select * from user where role = 2 limit #{limit},#{offset};
  </select>

  <select id="selectExpertsWithFieldAndLimit" resultType="com.meng.model.User">
    select * from user where role = 2 and field = #{field} limit #{limit},#{offset};
  </select>

</mapper>